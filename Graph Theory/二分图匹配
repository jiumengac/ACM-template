//O(n^2)二分图最大匹配
int n,a[N][N];
bool used[N];
int color[N];
bool match(int x)
{
    for(int i=1;i<=n;i++)
    {
        if(!used[i]&&a[x][i])
        {
            used[i]=1;
            if(color[i]==-1||match(color[i]))
            {
                color[i]=x;
                return 1;
            }
        }
    }
    return 0;
}
int main()
{
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            scanf("%d",&a[i][j]);
    memset(color,-1,sizeof color);
    bool ok=1;
    for(int i=1;i<=n;i++)
    {
        memset(used,0,sizeof used);
        if(!match(i)){ok=0;break;}
    }
    return 0;
}

//O(n^3)二分图最大权匹配
int w[N][N];
ll lx[N],ly[N]; //顶标
int linky[N];
ll pre[N];
bool vis[N];
bool visx[N],visy[N];
ll slack[N];
int n;
void bfs(int k)
{
    ll px,py=0,yy=0,d;
    memset(pre,0,sizeof pre);
    for(int i = 0; i < N; ++i)
        slack[i] = INF;
    linky[py]=k;
    do
    {
        px=linky[py],d=INF,vis[py]=1;
        for(int i=1;i<=n;i++)
            if(vis[i]==0)
            {
                if(slack[i]>lx[px]+ly[i]-w[px][i])
                    slack[i]=lx[px]+ly[i]-w[px][i],pre[i]=py;
                if(slack[i]<d) d=slack[i],yy=i;
            }
        for(int i=0;i<=n;i++)
            if(vis[i]) lx[linky[i]]-=d,ly[i]+=d;
            else slack[i]-=d;
        py=yy;
    }while(linky[py]!=0);
    while(py) linky[py]=linky[pre[py]],py=pre[py];
}
void KM()
{
    memset(lx,0,sizeof lx);
    memset(ly,0,sizeof ly);
    memset(linky,0,sizeof linky);
    for(int i=1;i<=n;i++)
        memset(vis,0,sizeof vis),bfs(i);
}
int main()
{
    while(~scanf("%d", &n))
    {
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                scanf("%d",&w[i][j]);//第i个匹配第j个
//                w[i][j] = -w[i][j];求最小费用,答案也取反
            }
        }
        KM();
        ll ans = 0;
        for(int i = 1; i <= n; ++i)
        {
            ans += lx[i];
            ans += ly[i];
        }
        printf("%lld\n", ans);
    }
    return 0;
}
