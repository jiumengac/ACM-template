struct edge{
    int to,Next,w;
}e[N];
int dis[N],father[20][N],depth[N];
int cnt,head[N],value[N];
void add(int u,int v,int w)
{
    e[cnt].to=v;
    e[cnt].w=w;
    e[cnt].Next=head[u];
    head[u]=cnt++;
}
void dfs(int u,int f)
{
    father[0][u]=f;
    for(int i=head[u];~i;i=e[i].Next)
    {
        int To=e[i].to;
        if(To!=f)
        {
            dis[To]=dis[u]+e[i].w;
            depth[To]=depth[u]+1;
            dfs(To,u);
        }
    }
}
void init(int n)
{
    depth[1]=1;
    dis[1]=0;
    dfs(1,-1);
    for(int i=1;i<20;i++)
        for(int j=1;j<=n;j++)
            father[i][j]=father[i-1][father[i-1][j]];
}
int lca(int x,int y)
{
    if(depth[x]>depth[y])swap(x,y);
    for(int i=0;i<20;i++)
        if((depth[y]-depth[x])>>i&1)
            y=father[i][y];
    if(x==y)return x;
    for(int i=19;i>=0;i--)
    {
        if(father[i][x]!=father[i][y])
        {
            x=father[i][x];
            y=father[i][y];
        }
    }
    return father[0][x];
}
