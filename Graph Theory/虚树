/*
先把需操作的点按dfs序排序,然后维护一个栈,表示从根到栈顶的链包含的需操作的点,考虑栈顶元素是p,栈第二个元素是q,需插入的点是x,
如果lca(p,x)为p,代表x在p子树中,直接入栈即可,又lca(p,x)不可能为p(因为按dfs序插入的)
1.如果lca(p,x)的深度比q的深度小,那么链接栈顶和栈次顶,pop栈顶
2.如果lca(p,x)的深度比q的深度大或相同,那么链接lca和p,然后pop栈顶,lca入栈,x入栈(当lca(p,x)和q深度相同,那么不用加入lca,q就是lca)
最后把栈中元素全部出栈,并链接,最后在虚树上dp.
(虚树题目很明显,多次查询,每次选取一些点操作,总的点不会很大,那么就可以用虚树)
*/
vector<pair<int,int> >v[N];
vi in;
struct edge{
    int to,Next,c;
}e[maxn];
int cnt,head[N],deep[N];
int fa[20][N],mi[20][N],l[N],res;
void init()
{
    cnt=res=0;
    memset(head,-1,sizeof head);
    memset(mi,inf,sizeof mi);
}
void add(int u,int v,int c)
{
    e[cnt].to=v;
    e[cnt].c=c;
    e[cnt].Next=head[u];
    head[u]=cnt++;
}
void dfs(int u,int f,int dep)
{
    l[u]=++res;
    deep[u]=dep;
    for(int i=head[u];~i;i=e[i].Next)
    {
        int x=e[i].to;
        if(x!=f)
        {
            fa[0][x]=u;mi[0][x]=e[i].c;
            dfs(x,u,dep+1);
        }
    }
}
void gao(int n)
{
    for(int i=1;i<20;i++)
    {
        for(int j=1;j<=n;j++)
        {
            fa[i][j]=fa[i-1][fa[i-1][j]];
            mi[i][j]=min(mi[i-1][fa[i-1][j]],mi[i-1][j]);
        }
    }
}
int lca(int x,int y)
{
    if(deep[x]>deep[y])swap(x,y);
    for(int i=19;i>=0;i--)
        if(((deep[y]-deep[x])>>i)&1)
            y=fa[i][y];
    if(x==y)return x;
    for(int i=19;i>=0;i--)
    {
        if(fa[i][x]!=fa[i][y])
        {
            x=fa[i][x];
            y=fa[i][y];
        }
    }
    return fa[0][x];
}
int getmi(int a,int b)
{
    if(deep[a]>deep[b])swap(a,b);
    int ans=inf;
    for(int i=19;i>=0;i--)
    {
        if(deep[fa[i][b]]>deep[a])
        {
            ans=min(ans,mi[i][b]);
            b=fa[i][b];
        }
    }
    return min(ans,mi[0][b]);
}
void add1(int a,int b,int c){v[a].pb(mp(b,c));in.pb(a);in.pb(b);}
int st[N],top,a[N];
ll dp[N];
void ins(int x)
{
    if(!top){st[++top]=x;return ;}
    int lc=lca(st[top],x);
    while(top>1&&deep[st[top-1]]>deep[lc])
        add1(st[top-1],st[top],getmi(st[top-1],st[top])),top--;
    if(top>=1&&deep[st[top]]>deep[lc])
        add1(lc,st[top],getmi(st[top],lc)),top--;
    if(!top||deep[st[top]]<deep[lc])st[++top]=lc;
    st[++top]=x;
}
bool cmp(int a,int b){return l[a]<l[b];}
bool ban[N];
//给k个点让1和给定点不能联通,求最小花费
void dfs1(int u,ll mm)//树型dp
{
    for(int i=0;i<v[u].size();i++)
        dfs1(v[u][i].fi,v[u][i].se);
    if(ban[u]){dp[u]=mm;return ;}
    else
    {
        ll res=0;
        for(int i=0;i<v[u].size();i++)
            res+=dp[v[u][i].fi];
        dp[u]=min(res,mm);
    }
}
int main()
{
    int n;
    scanf("%d",&n);
    init();
    for(int i=1;i<n;i++)
    {
        int a,b,c;
        scanf("%d%d%d",&a,&b,&c);
        add(a,b,c);add(b,a,c);
    }
    dfs(1,-1,1);gao(n);
    int m;scanf("%d",&m);
    for(int i=1;i<=m;i++)
    {
        in.clear();
        int k;
        scanf("%d",&k);
        for(int j=0;j<k;j++)scanf("%d",&a[j]),ban[a[j]]=1;
        sort(a,a+k,cmp);
        top=0;ins(1);
        for(int j=0;j<k;j++)ins(a[j]);
        while(top>=2)add1(st[top-1],st[top],getmi(st[top-1],st[top])),top--;
        dfs1(1,1e18);
        printf("%lld\n",dp[1]);
        for(int j=0;j<in.size();j++)
            v[in[j]].clear(),dp[in[j]]=0,ban[in[j]]=0;
    }
    return 0;
}
