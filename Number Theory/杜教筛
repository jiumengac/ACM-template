int prime[N],cnt,mu[N];
ll phi[N];
bool mark[N];
map<int,int>muu;
map<int,int>::iterator it1;
map<int,ll>phii;
map<int,ll>::iterator it2;
void init()
{
    mu[1]=phi[1]=1;
    for(int i=2;i<N;i++)
    {
        if(!mark[i])prime[++cnt]=i,mu[i]=-1,phi[i]=i-1;
        for(int j=1;j<=cnt&&i*prime[j]<N;j++)
        {
            mark[i*prime[j]]=1;
            if(i%prime[j]==0)
            {
                mu[i*prime[j]]=0;
                phi[i*prime[j]]=phi[i]*prime[j];
                break;
            }
            mu[i*prime[j]]=-mu[i];
            phi[i*prime[j]]=phi[i]*(prime[j]-1);
        }
    }
    for(int i=1;i<N;i++)mu[i]+=mu[i-1],phi[i]+=phi[i-1];
}
ll getmu(ll n)
{
    if(n<N)return mu[n];
    if((it1=muu.find(n))!=muu.end())return it1->se;
    ll ans=1;
    for(ll i=2,j;i<=n;i=j+1)
    {
        j=n/(n/i);
        ans-=1ll*(j-i+1)*getmu(n/i);
    }
    return muu[n]=ans;
}
ll getphi(ll n)
{
    if(n<N)return phi[n];
    if((it2=phii.find(n))!=phii.end())return it2->se;
    ll ans=n*(n+1)/2;
    for(ll i=2,j;i<=n;i=j+1)
    {
        j=n/(n/i);
        ans-=1ll*(j-i+1)*getphi(n/i);
    }
    return phii[n]=ans;
}

//省map
int prime[N],cnt,mu[N];
ll phi[N],n,muu[N],phii[N];
bool mark[N],vis[N];
void init()
{
    mu[1]=phi[1]=1;
    for(int i=2;i<N;i++)
    {
        if(!mark[i])prime[++cnt]=i,mu[i]=-1,phi[i]=i-1;
        for(int j=1;j<=cnt&&i*prime[j]<N;j++)
        {
            mark[i*prime[j]]=1;
            if(i%prime[j]==0)
            {
                mu[i*prime[j]]=0;
                phi[i*prime[j]]=phi[i]*prime[j];
                break;
            }
            mu[i*prime[j]]=-mu[i];
            phi[i*prime[j]]=phi[i]*(prime[j]-1);
        }
    }
    for(int i=1;i<N;i++)mu[i]+=mu[i-1],phi[i]+=phi[i-1];
}
void get(ll x)
{
    if(x<N)return ;
    if(vis[n/x])return ;
    vis[n/x]=1;
    phii[n/x]=x*(x+1)/2;
    muu[n/x]=1;
    for(ll i=2,j;i<=x;i=j+1)
    {
        j=x/(x/i);
        if(x/i<N)phii[n/x]-=1ll*(j-i+1)*phi[x/i],muu[n/x]-=1ll*(j-i+1)*mu[x/i];
        else
        {
            get(x/i);
            phii[n/x]-=1ll*(j-i+1)*phii[n/(x/i)];
            muu[n/x]-=1ll*(j-i+1)*muu[n/(x/i)];
        }
    }
}
int main()
{
    init();
    int T;scanf("%d",&T);
    while(T--)
    {
        memset(vis,0,sizeof vis);
        scanf("%lld",&n);
        if(n<N)printf("%lld %d\n",phi[n],mu[n]);
        else
        {
            memset(vis,0,sizeof vis);get(n);
            printf("%lld %lld\n",phii[1],muu[1]);
        }
    }
    return 0;
}
狄利克雷卷积:
$(f*g)(n)=\sum_{d|n}f(d)\cdot g(\frac{n}{d})$
$\sum_{i=1}^n(f*g)(i)$
$=\sum_{i=1}^n\sum_{d|i}f(\frac{n}{d}){\cdot}g(d)$
$=\sum_{d=1}^ng(d)\sum_{i=1}^{\lfloor \frac{n}{d} \rfloor}f(i)$
$=\sum_{d=1}g(d){\cdot}S(\lfloor \frac{n}{d} \rfloor)$
那么有$g(1)\cdot S(n)=\sum_{i=1}^n(f*g)(i)-\sum_{d=2}^ng(d)\cdot S(\lfloor \frac{n}{d} \rfloor)$

让$g=I$(常函数),由于当$f=\mu$时，$\mu*I=e$，那么$S(n)=\sum_{i=1}^n(f*g)(i)-\sum_{d=2}^nS(\lfloor \frac{n}{d} \rfloor)=1-\sum_{d=2}^nS(\lfloor \frac{n}{d} \rfloor)$

当$f=\phi$时，$\phi*I=id$,那么$S(n)=\sum_{i=1}^n(f*g)(i)-\sum_{d=2}^nS(\lfloor \frac{n}{d} \rfloor)=n\cdot (n+1)/2-\sum_{d=2}^nS(\lfloor \frac{n}{d} \rfloor)$

复杂度$O(n^{\frac{2}{3}})$,前$n^{\frac{2}{3}}$预处理，后面的根据分块记忆化递推
