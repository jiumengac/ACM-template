//a,b卷积,模数p
//拆系数,8次dft
#define ld long double
struct cd{
    ld x,y;
    cd(ld _x=0.0,ld _y=0.0):x(_x),y(_y){}
    cd operator +(const cd &b)const{
        return cd(x+b.x,y+b.y);
    }
    cd operator -(const cd &b)const{
        return cd(x-b.x,y-b.y);
    }
    cd operator *(const cd &b)const{
        return cd(x*b.x - y*b.y,x*b.y + y*b.x);
    }
    cd operator /(const db &b)const{
        return cd(x/b,y/b);
    }
}a[N],b[N],c[N],d[N];
int rev[N],A[N],B[N],C[N];
void getrev(int bit)
{
    for(int i=0;i<(1<<bit);i++)
        rev[i]=(rev[i>>1]>>1) | ((i&1)<<(bit-1));
}
void fft(cd *a,int n,int dft)
{
    for(int i=0;i<n;i++)if(i<rev[i])swap(a[i],a[rev[i]]);
    for(int step=1;step<n;step<<=1)
    {
        cd wn(cos(dft*pi/step),sin(dft*pi/step));
        for(int j=0;j<n;j+=step<<1)
        {
            cd wnk(1,0);
            for(int k=j;k<j+step;k++)
            {
                cd x=a[k];
                cd y=wnk*a[k+step];
                a[k]=x+y;a[k+step]=x-y;
                wnk=wnk*wn;
            }
        }
    }
    if(dft==-1)for(int i=0;i<n;i++)a[i]=a[i]/n;
}
void mtt(int n,int m,int p) {
    int sz=0;
    while((1<<sz)<=n+m)sz++;getrev(sz);
    int len=1<<sz;
    for(int i=0;i<len;i++)
    {
        int t1=A[i]%p,t2=B[i]%p;
        a[i]=cd(t1>>15,0),b[i]=cd(t1&0x7fff,0);
        c[i]=cd(t2>>15,0),d[i]=cd(t2&0x7fff,0);
    }
    fft(a,len,1);fft(b,len,1);fft(c,len,1);fft(d,len,1);
    for(int i=0;i<len;i++)
    {
        cd aa=a[i],bb=b[i],cc=c[i],dd=d[i];
        a[i]=aa*cc;b[i]=bb*cc;c[i]=aa*dd;d[i]=bb*dd;
    }
    fft(a,len,-1);fft(b,len,-1);fft(c,len,-1);fft(d,len,-1);
    for(int i=0;i<len;i++)
    {
        ll aa=(ll)(a[i].x+0.5),bb=(ll)(b[i].x+0.5);
        ll cc=(ll)(c[i].x+0.5),dd=(ll)(d[i].x+0.5);
        aa=(aa%p+p)%p;bb=(bb%p+p)%p;cc=(cc%p+p)%p;dd=(dd%p+p)%p;
        C[i]=((((aa<<15)%p)<<15)%p+(bb<<15)%p+(cc<<15)%p+dd)%p;
    }
}
int main()
{
    int n,m,p;scanf("%d%d%d",&n,&m,&p);
    for(int i=0;i<=n;i++)scanf("%d",&A[i]);
    for(int i=0;i<=m;i++)scanf("%d",&B[i]);
    mtt(n,m,p);
    for(int i=0;i<=n+m;i++)printf("%d ",C[i]);
    return 0;
}
//黑科技优化,4次dft
#define ld long double
struct cd{
    ld x,y;
    cd(ld _x=0.0,ld _y=0.0):x(_x),y(_y){}
    cd operator +(const cd &b)const{
        return cd(x+b.x,y+b.y);
    }
    cd operator -(const cd &b)const{
        return cd(x-b.x,y-b.y);
    }
    cd operator *(const cd &b)const{
        return cd(x*b.x - y*b.y,x*b.y + y*b.x);
    }
    cd operator /(const db &b)const{
        return cd(x/b,y/b);
    }
}a[N],b[N],dfta[N],dftb[N],dftc[N],dftd[N];
cd conj(cd a){return cd(a.x,-a.y);}
int rev[N],A[N],B[N],C[N];
void getrev(int bit)
{
    for(int i=0;i<(1<<bit);i++)
        rev[i]=(rev[i>>1]>>1) | ((i&1)<<(bit-1));
}
void fft(cd *a,int n,int dft)
{
    for(int i=0;i<n;i++)if(i<rev[i])swap(a[i],a[rev[i]]);
    for(int step=1;step<n;step<<=1)
    {
        cd wn(cos(dft*pi/step),sin(dft*pi/step));
        for(int j=0;j<n;j+=step<<1)
        {
            cd wnk(1,0);
            for(int k=j;k<j+step;k++)
            {
                cd x=a[k];
                cd y=wnk*a[k+step];
                a[k]=x+y;a[k+step]=x-y;
                wnk=wnk*wn;
            }
        }
    }
    if(dft==-1)for(int i=0;i<n;i++)a[i]=a[i]/n;
}
void mtt(int n,int m,int p) {
    int sz=0;
    while((1<<sz)<=n+m)sz++;getrev(sz);
    int len=1<<sz;
    for(int i=0;i<len;i++)
    {
        int x=(i>n?0:A[i]%p),y=(i>m?0:B[i]%p);
        a[i]=cd(x&0x7fff,x>>15);
        b[i]=cd(y&0x7fff,y>>15);
    }
    fft(a,len,1);fft(b,len,1);
    for(int i=0;i<len;i++)
    {
        int j=(len-i)&(len-1);
        cd aa,bb,cc,dd;
        aa = (a[i] + conj(a[j])) * cd(0.5, 0);
        bb = (a[i] - conj(a[j])) * cd(0, -0.5);
        cc = (b[i] + conj(b[j])) * cd(0.5, 0);
        dd = (b[i] - conj(b[j])) * cd(0, -0.5);
        dfta[j] = aa * cc;dftb[j] = aa * dd;
        dftc[j] = bb * cc;dftd[j] = bb * dd;
    }
    for(int i=0;i<len;i++)
    {
        a[i] = dfta[i] + dftb[i] * cd(0, 1);
        b[i] = dftc[i] + dftd[i] * cd(0, 1);
    }
    fft(a,len,1);fft(b,len,1);
    for(int i=0;i<len;i++)
    {
        int da = (ll)(a[i].x / len + 0.5) % p;
        int bb = (ll)(a[i].y / len + 0.5) % p;
        int dc = (ll)(b[i].x / len + 0.5) % p;
        int dd = (ll)(b[i].y / len + 0.5) % p;
        C[i] = (da + ((ll)(bb + dc) << 15) + ((ll)dd << 30)) % p;
        C[i] = (C[i]+p)%p;
    }
}
int main()
{
    int n,m,p;scanf("%d%d%d",&n,&m,&p);
    for(int i=0;i<=n;i++)scanf("%d",&A[i]);
    for(int i=0;i<=m;i++)scanf("%d",&B[i]);
    mtt(n,m,p);
    for(int i=0;i<=n+m;i++)printf("%d ",C[i]);
    return 0;
}
