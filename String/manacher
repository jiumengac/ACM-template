//O(n),p[i]表示以i为中心，向两侧所能构成最远的回文串的距离
char s[N],te[N];
int p[N],len;
void manacher()
{
    int mx=0,id;
    for(int i=1;i<=len;i++)
    {
        if(mx>i)p[i]=min(p[2*id-i],mx-i);
        else p[i]=1;
        while(s[i+p[i]]==s[i-p[i]])p[i]++;
        if(p[i]+i>mx)
        {
            mx=p[i]+i;
            id=i;
        }
    }
}
int main()
{
    int cnt=0;
    while(~scanf("%s",te+1))
    {
        int n=strlen(te+1);
        len=0;
        s[++len]='$';s[++len]='#';
        for(int i=1;i<=n;i++)
        {
            s[++len]=te[i];
            s[++len]='#';
        }
        memset(p,0,sizeof p);
        manacher();
        int ans=-1;
        for(int i=1;i<len;i++)
            ans=max(ans,p[i]-1);
        printf("%d\n",ans);
    }
    return 0;
}

void manacher(char *s, int n, int *p) {
    s[0] = '-', s[n + 1] = '+';
    int mx = 0, id = 0;
    for(int i = 1; i <= n; i++) {
        if(mx > i) p[i] = min(mx - i, p[2 * id - i]);
        else p[i] = 1;
        while(s[i + p[i]] == s[i - p[i]]) p[i]++;
        if(i + p[i] > mx) mx = i + p[i], id = i;
    }
    mx = 0, id = 0;
    for(int i = 1; i <= n; i++) {
        if(mx > i) p[i] = min(mx - i, p[2 * id - i]);
        else p[i] = 0;
        while(s[i + p[i] + 1] == s[i - p[i]]) p[i]++;
        if(i + p[i] > mx) mx = i + p[i], id = i;
    }
}
