struct Trie{
    int tot,root;
    int Next[N*32][3],cnt[N*32];
    int newnode()
    {
        memset(Next[tot],-1,sizeof Next[tot]);
        cnt[tot]=0;
        return tot++;
    }
    void init()
    {
        tot=0;
        root=newnode();
    }
    void ins(int x)
    {
        int now=root;
        for(int i=30;i>=0;i--)
        {
            if(Next[now][(x>>i)&1]==-1)
                Next[now][(x>>i)&1]=newnode();
            now=Next[now][(x>>i)&1];
//            printf("%d+++\n",now);
            cnt[now]++;
        }
    }
    void del(int x)//从字典树中删除
    {
        int now=root;
        for(int i=30;i>=0;i--)
        {
            cnt[Next[now][(x>>i)&1]]--;
            if(cnt[Next[now][(x>>i)&1]]==0)
            {
                Next[now][(x>>i)&1]=-1;
                break;
            }
            now=Next[now][(x>>i)&1];
//            printf("%d---%d\n",now,cnt[now]);
        }
    }
    int query(int x,int y)//查询集合中异或x小于y的数的个数
    {
        int now=root,ans=0;
        for(int i=30;i>=0;i--)
        {
            int px=(x>>i)&1,py=(y>>i)&1;
            if(py)
            {
                if(Next[now][px]!=-1)
                {
                    ans+=cnt[Next[now][px]];
//                    if(cnt[Next[now][px^1]])printf("%d!!!!\n",Next[now][px^1]);
                }
                now=Next[now][px^1];
            }
            else
            {
                now=Next[now][px];
            }
            if(now==-1)break;
        }
        return ans;
    }
}s;
