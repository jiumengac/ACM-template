struct DSU {
    int fa[N];
    vector<int> base[N];
    void add(int tar,int x) {
        for(auto &t : base[tar])
            x = min(x, x^t);
        if(!x) return;
        for(auto &t : base[tar])
            t = min(t, t^x);
        base[tar].push_back(x);
    }
    int query(int tar) {
        int res=0;
        for(auto &t : base[tar])
            res = max(res, res^t);
        return res;
    }
    void init(int n) {
        for(int i = 1;i <= n; i++)
            fa[i] = i, add(i,a[i]);
    }
    int find(int x) {
        return fa[x]==x ? x : fa[x]=find(fa[x]);
    }
    void merge(int x,int y) {
        x = find(x), y = find(y);
        if(x == y)return;
        fa[x] = y;
        for(auto &v : base[x]) add(y,v);
        base[x].clear();
    }
    int answer(int x) {
        x=find(x);
        return query(x);
    }
};
//线型基求交
struct lb {
    ll r[32];
    lb() {for (int i=0;i<=31;i++) r[i] = 0;}
    bool update(ll x) {
        for (int i=31;i>=0;i--) if ((x >> i) & 1) {
            if (r[i] == 0) { r[i] = x; return true; }
            else x ^= r[i];
        }
        return false;
    }
    bool query(ll x) {
        for (int i=31;i>=0;i--) if ((x >> i) & 1) {
            if (r[i] == 0) return false;
            x ^= r[i];
        }
        return true;
    }
    lb Merge(lb a,lb b) {
        lb all,d,ret;
        for (int i=31;i>=0;i--) {
            all.r[i] = a.r[i];
            d.r[i] = 1 << i;
        }
        for (int i=31;i>=0;i--) if (b.r[i]) {
            ll v = b.r[i],k = 0;
            bool flag = true;
            for (int j=31;j>=0;j--) if ((v >> j) & 1) {
                if (all.r[j]) { v ^= all.r[j]; k ^= d.r[j];}
                else { flag = false; all.r[j] = v; d.r[j] = k; break; }
            }
            if (flag) {
                ll tmp = 0;
                for (int j=31;j>=0;j--) if ((k >> j) & 1) tmp ^= a.r[j];
                ret.update(tmp);
            }
        }
        return ret;
    }
};
